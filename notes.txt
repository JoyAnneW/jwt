npm init -y
  - initializes project with all defaults in package.json

npm i express jsonwebtoken dotenv
  - install necessary dependencies to create express server

npm i bcrypt
  - allows for cryptography and hash creation

npm i -- save-dev nodemon
  - instal nodemon

create server file

add script in package.json to run nodemon in server file
  - "start": "nodemon server.js"

import express

get the app variable from the express fn and use the .listen property to set up the server on port 3000
  - app.listen(3000)

.rest file allows us to make requests to an api. Can also use postman. but with the REST Client ext of vscode, this can be done here

To hash a password there are 2 steps
  1 create a salt 
  2 use that salt to hash a password
  Salt must be saved along with the password
  - if we simply passed a password string through a basic fn that transforms the password in some way, the problem is that it would produce the same 'hash' everytime. so if several users had the same password, this would be a huge security issue.
    - the salt adds a different series of characters before each password so that the hash created is always unique

  bcrypt(async) takes care of all this for us!

  JWTs
  to create a secret key, use crypt library in node
    - in terminal: 
      > node
      > require("crypto").randomBytes(64).toString("hex")
    - this will give a random set of characters everytime it's called